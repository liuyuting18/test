#include <iostream>
#include <cstdio>
#include <cstring>
#include <algorithm>
#include <queue>
using namespace std;
const int inf = 0x3f3f3f3f;
int N, M, S, D;
int map[550][550];
int val[550], dis[550], vis[550], cnt[550], sum[550], pre[550];
//每点权值   距S距离   标记      路径数量  最大救援队  前驱 
void path(int d) {
	if(pre[d] != -1) {
		path(pre[d]);
		printf("%d ", pre[d]);
	}
}
int main() {
	scanf("%d %d %d %d", &N, &M, &S, &D);
	int i, j;
	for(i = 0; i < N; i++) {
		scanf("%d", val + i);
	}
	for(i = 0; i < N; i++) {
		for(j = 0; j < N; j++) {
			if(i == j) map[i][j] = 0;
			else map[i][j] = inf;
		}
	}
	int x, y, z;
	for(i = 0; i < M; i++) {
		scanf("%d %d %d", &x, &y, &z);
		map[x][y] = z;
		map[y][x] = z;
	}
	for(i = 0; i < N; i++) {  //初始化 
		dis[i] = inf;
		vis[i] = 0;
		cnt[i] = 0;
		sum[i] = 0;
		pre[i] = -1;
	}
	dis[S] = 0;  //初始化起始点 
	vis[S] = 1;
	cnt[S] = 1; //起点到其本身方式为1 
	sum[S] = val[S];
	for(i = 0; i < N; i++) {
		int minn = inf, mini = S;
		for(j = 0; j < N; j++) {
			if(vis[j] == 0 && minn > dis[j]) {
				minn = dis[j];
				mini = j;
			}
		}
		vis[mini] = 1;
		for(j = 0; j < N; j++) {
			if(vis[j] == 0) {
				if(dis[j] > dis[mini] + map[mini][j]) {
					dis[j] = dis[mini] + map[mini][j];
					sum[j] = sum[mini] + val[j];
					cnt[j] = cnt[mini];  //方式等于到达前驱的方式 
					pre[j] = mini;
				}
				else if(dis[j] == dis[mini] + map[mini][j]) {
					cnt[j] = cnt[mini] + cnt[j]; //两种方式距离相等，则方式数相加 
					if(sum[j] < sum[mini] + val[j]) {  //能获得更大的救援，则更新 
						sum[j] = sum[mini] + val[j];
						pre[j] = mini;
					}
				}
			}
		}
	}
	printf("%d %d\n", cnt[D], sum[D]);
	path(D);
	printf("%d\n", D);
    return 0;
}
