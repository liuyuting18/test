#include <stdio.h>
#include <stdlib.h>
int b[1100];
int index;
void Check(int *a,int start,int end)
{
    int middle,temp;
    if(start > end)
    {
        return;
    }
    if(start == end)
    {
        b[index] = a[start];
        index++;
        return;
    }
    middle = start + 1;
    while(a[middle] < a[start]) //找到右子树根节点
    {
        middle++;
    }
    temp = middle;
    while(middle <= end)     //右子树每一个节点应大于等于根节点
    {
        if(a[middle] < a[start])
        {
            return;
        }
        middle++;
    }
    Check(a,start+1,temp-1);
    Check(a,temp,end);
    b[index] = a[start];
    index++;
}
void MirrorCheck(int *a,int start,int end)
{
    int middle,temp;
    if(start > end)
    {
        return;
    }
    if(start == end)
    {
        b[index] = a[start];
        index++;
        return;
    }
    middle = start + 1;
    while(a[middle] >= a[start])  //找到右子树根节点
    {
        middle++;
    }
    temp = middle;
    while(middle < end)
    {
        if(a[middle] >= a[start])
        {
            return;
        }
        middle++;
    }
    MirrorCheck(a,start+1,temp-1);
    MirrorCheck(a,temp,end);
    b[index] = a[start];
    index++;
}
int main()
{
    int a[1100];
    int N,i,flag=1;
    scanf("%d",&N);
    for(i=0;i<N;i++)
    {
        scanf("%d",&a[i]);
    }
    if(a[0] < a[1])
    {
        MirrorCheck(a,0,N-1);
    }
    else
    {
        Check(a,0,N-1);
    }
    if(N != index)
    {
        printf("NO\n");
    }
    else
    {
        puts("YES");
        for(i=0;i<index;i++)
        {
            if(flag)
            {
                printf("%d",b[i]);
                flag = 0;
            }
            else
            {
                printf(" %d",b[i]);
            }

        }
    }
    return 0;
}
